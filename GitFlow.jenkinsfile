//@Library('GitFlow_Shared_Lib@main') _

String hostCredentialsId    = 'PFHMKS0'                   /* Change to Jenkins credentials ID for Host userid/password            */
String cesCredentialsId     = 'CWEZXXX-CES'                    /* Change to Jenkins credentials ID for CES token                       */
String gitRepoUrl           = 'https://github.com/CPWRGIT/GitFlow_PFHMKS0.git'                        /* Change "<repo>" to user specific repository name                     */
String gitCredentialsId     = 'a7500faf-0dd3-42b5-8b00-0553524a79d2'           /* Change to Jenkins credentials ID for GitHub personal access token    */
String gitCredentialsId     = 'ec3e192a-3e5f-4c5f-bb40-129b63ce6c23'           /* Change to Jenkins credentials ID for GitHub personal access token    */
String ccRepo               = 'PFHMKS0.XPCOVER.REPOSIT'                  /* Change to user specific code coverage repository                     */
String hostConnectionId     = '38e854b0-f7d3-4a8f-bf31-2d8bfac3dbd4'     /* For CWC2 */
String runtimeConfig        = 'ic2ga'                                   /* For CWC2. Chnage for CWCC */

//This code will be used later to call a shared library script
// git2Ispw(
//     executionEnvironment: 'CWCC',
//     hostCredentialsId:    hostCredentialsId,
//     cesCredentialsId:     cesCredentialsId, 
//     gitCredentialsId:     gitCredentialsId, 
//     gitRepoUrl:           gitRepoUrl,       
//     ccRepo:               ccRepo
// )

stage ("Initialize") {
    node {
        // Clean the workspace
        cleanWs()
    }
}

stage ("Checkout") {
    node {
         // Get the code from the Git repository
        checkout scm
    }
}

stage ("Load Code to Mainframe") {
    node {
        gitToIspwIntegration app: "GFLD",
        branchMapping: '''*release* => RLSE, per-branch'
        //development* => EMR, per-branch
        feature* => FEAT, per-branch''',
        connectionId: "${hostConnectionId}", // CWC2
        credentialsId: "${hostCredentialsId}",
        gitCredentialsId: "${gitCredentialsId}", // Mingh9999
        gitRepoUrl: "${gitRepoUrl}",
        runtimeConfig: "${runtimeConfig}", // CWC2
        stream: 'GITFLOW',
        ispwConfigPath: "./GenApp_MainFrameCore/ispwconfig.yml"
    }
}

stage ("Build Mainframe Code") {
    node {
        ispwOperation(
            connectionId:           "${hostConnectionId}", 
            credentialsId:          "${cesCredentialsId}",       
            consoleLogResponseBody: true, 
            ispwAction:             'BuildTask', 
            ispwRequestBody:        '''runtimeConfiguration=''' + runtimeConfig + '''
            buildautomatically = true'''
        )
    }
}

stage ("Execute Unit Tests") {
    node {
        totaltest(
            serverUrl:                          "http://cwc2.bmc.com:2020", 
            serverCredentialsId:                hostCredentialsId, 
            credentialsId:                      hostCredentialsId, 
            environmentId:                      '5c519facfba8720a90ccc645',
            localConfig:                        false, 
            //localConfigLocation:                tttConfigFolder, 
            folderPath:                         "./GenApp_MainframeCore/Tests/Unit", 
            recursive:                          true, 
            selectProgramsOption:               true, 
            jsonFile:                           "./changedPrograms.json",
            haltPipelineOnFailure:              false,                 
            stopIfTestFailsOrThresholdReached:  false,
            createJUnitReport:                  true, 
            createReport:                       true, 
            createResult:                       true, 
            createSonarReport:                  true,
            contextVariables:                   '"ispw_app=GFLD,ispw_level=FEAT"',
            collectCodeCoverage:                true,
            collectCCRepository:                ccRepo,
            collectCCSystem:                    "FEAT",
            collectCCTestID:                    "${BUILD_DISPLAY_NAME}",
            clearCodeCoverage:                  false,
            logLevel:                           'INFO'
        )
    }
}

stage ("SonarQube Scan") {
    node {
    }
}
